package com.chinaiat.bob.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinaiat.bob.bean.FruitInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRUIT_INFO".
*/
public class FruitInfoDao extends AbstractDao<FruitInfo, Long> {

    public static final String TABLENAME = "FRUIT_INFO";

    /**
     * Properties of entity FruitInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FruitName = new Property(1, String.class, "fruitName", false, "FRUIT_NAME");
        public final static Property FruitDescription = new Property(2, String.class, "fruitDescription", false, "FRUIT_DESCRIPTION");
        public final static Property ImgResId = new Property(3, int.class, "imgResId", false, "IMG_RES_ID");
        public final static Property IsCollect = new Property(4, boolean.class, "isCollect", false, "IS_COLLECT");
    }


    public FruitInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FruitInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRUIT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"FRUIT_NAME\" TEXT," + // 1: fruitName
                "\"FRUIT_DESCRIPTION\" TEXT," + // 2: fruitDescription
                "\"IMG_RES_ID\" INTEGER NOT NULL ," + // 3: imgResId
                "\"IS_COLLECT\" INTEGER NOT NULL );"); // 4: isCollect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRUIT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FruitInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String fruitName = entity.getFruitName();
        if (fruitName != null) {
            stmt.bindString(2, fruitName);
        }
 
        String fruitDescription = entity.getFruitDescription();
        if (fruitDescription != null) {
            stmt.bindString(3, fruitDescription);
        }
        stmt.bindLong(4, entity.getImgResId());
        stmt.bindLong(5, entity.getIsCollect() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FruitInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String fruitName = entity.getFruitName();
        if (fruitName != null) {
            stmt.bindString(2, fruitName);
        }
 
        String fruitDescription = entity.getFruitDescription();
        if (fruitDescription != null) {
            stmt.bindString(3, fruitDescription);
        }
        stmt.bindLong(4, entity.getImgResId());
        stmt.bindLong(5, entity.getIsCollect() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FruitInfo readEntity(Cursor cursor, int offset) {
        FruitInfo entity = new FruitInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fruitName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fruitDescription
            cursor.getInt(offset + 3), // imgResId
            cursor.getShort(offset + 4) != 0 // isCollect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FruitInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFruitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFruitDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgResId(cursor.getInt(offset + 3));
        entity.setIsCollect(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FruitInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FruitInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FruitInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
